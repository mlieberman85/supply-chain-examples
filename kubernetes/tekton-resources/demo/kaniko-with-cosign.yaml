apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: kaniko
  labels:
    app.kubernetes.io/version: "0.5"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Image Build
    tekton.dev/tags: image-build
    tekton.dev/displayName: "Build and upload container image using Kaniko"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This Task builds source into a container image using Google's kaniko tool.

    Kaniko doesn't depend on a Docker daemon and executes each
    command within a Dockerfile completely in userspace. This enables
    building container images in environments that can't easily or
    securely run a Docker daemon, such as a standard Kubernetes cluster.

  params:
  - name: IMAGE
    description: Name (reference) of the image to build.
  - name: DOCKERFILE
    description: Path to the Dockerfile to build.
    default: ./Dockerfile
  - name: CONTEXT
    description: The build context used by Kaniko.
    default: ./
  - name: EXTRA_ARGS
    type: array
    default: []
  - name: BUILDER_IMAGE
    description: The image on which builds will run (default is v1.5.1)
    default: gcr.io/kaniko-project/executor:v1.5.1@sha256:c6166717f7fe0b7da44908c986137ecfeab21f31ec3992f6e128fff8a94be8a5
  workspaces:
  - name: source
    description: Holds the context and docker file
  - name: dockerconfig
    description: Includes a docker `config.json`
    optional: true
    mountPath: /kaniko/.docker
  results:
  - name: IMAGE_DIGEST
    description: Digest of the image just built.
  - name: IMAGE_URL
    description: URL of the image just built.

  steps:
  # UNCOMMENT BELOW STEP TO TEST OUT SIGNED IMAGES/COMMENT OUT BELOW STEP TO TEST WITHOUT SIGNED IMAGES
  - name: validate-parent-image-is-signed
    workingDir: $(workspaces.source.path)
    # Replace below with your own image based on cosign docker file.
    # You can do this by cloning: https://github.com/sigstore/cosign/
    # And then in the cosign directory: 
    #   docker build . --tag ttl.sh/foo-cosign:1h -f Dockerfile
    #   cosign sign -key k8s://tekton-chains/signing-secrets docker push ttl.sh/foo-cosign:1h
    #   docker push ttl.sh/foo-cosign:1h
    # You can replace the tag above with whatever you want and have access to push to.
    # If you are using the admission controller you need to make sure the above image is signed by cosign
    image: ghcr.io/mlieberman85/cosign
    args:
      - verify-dockerfile
      - -key=https://drive.google.com/uc?export=download&id=1GYT5xnhDgY79AJ8prNyVPC52rTGdFQpg
      - $(params.DOCKERFILE)
  - name: build-and-push
    workingDir: $(workspaces.source.path)
    image: $(params.BUILDER_IMAGE)
    args:
    - $(params.EXTRA_ARGS[*])
    - --dockerfile=$(params.DOCKERFILE)
    - --context=$(workspaces.source.path)/$(params.CONTEXT)  # The user does not need to care the workspace and the source.
    - --destination=$(params.IMAGE)
    - --digest-file=/tekton/results/IMAGE_DIGEST
    # kaniko assumes it is running as root, which means this example fails on platforms
    # that default to run containers as random uid (like OpenShift). Adding this securityContext
    # makes it explicit that it needs to run as root.
  - name: write-url
    image: bash
    script: |
      set -e
      echo $(params.IMAGE) | tee $(results.IMAGE_URL.path)